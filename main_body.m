#! /usr/bin/octave -qf

################################################################################
################################ Start settings ################################
## Prepare workspace
close all;
clear all;
clc;
main.script_version = "0.1.00";
pkg load zenity; # control is dependency for image and leasqr is in optim
pkg load image;
pkg load optim;
addpath ("./functions/");

source ("./files/options");

## Sanity checks
if (options.nNorm > options.nPre_bleach)
  error("The number of frames to use for normalization of values (%g) is larger than the number of pre-bleach frames (%g)", nNorm, nPre_bleach);
endif

################################################################################
############################## Start user input ################################

## Get file list of files from user
do
  current_files = zenity_file_selection("Choose files to analyze", 'multiple');
  if(!isfield (main, "file_list") && !isempty(current_files{1}))
    main.file_list = current_files;
  elseif(!isempty(current_files{1}))
    main.file_list = vertcat(main.file_list, current_files);
  endif
until (isempty(current_files{1}))

if (!isfield (main, "file_list"))
  error ("No file was selected")
endif

######################## Start of the big loop #################################
for iGeneral = 1:length(main.file_list)

  file.path                             = main.file_list{iGeneral};
  [file.dir, file.name, file.extension] = fileparts(file.path);

  ## Open the image
  image.here = read_image(file.path, file.extension, options.nFrames);
  image.here = squeeze (image.here);

  if (ndims(image.here) != 3)
    error ("Image from file '%s' has not 3 dimensions. It has %g dimensions. Skipping file", file.path, ndims(image.here));
    clear -exclusive options main;
    continue
  endif

  ##Stores info from image
  image.height	= rows(image.here);
  image.width		= columns(image.here);

  ## Calculate timestamps
  image.timestamps	= linspace(0, options.tScan*(options.nFrames-1), options.nFrames);

  ## Creates useful slices of the image
  image.slice_avg   = uint8( mean(image.here(:,:,options.avg_start:options.avg_end),3));
  image.slice_pre   = uint8( mean(image.here(:,:,options.pre_start:options.pre_end),3));
  image.slice_post  = uint8( mean(image.here(:,:,options.post_start:options.post_end),3));
  image.bleach      = double(image.slice_pre) - double(image.slice_post);
################################################################################
########################### Start image processing #############################

  ## Find background, bleaching and nucleus regions
  [...
  backg.index ...
  boundaries.backg ...
                    ] = finder_background (...
                                          image.slice_avg, ...
                                          options.backg_size);

  [...
  bleach.index ...
  bleach.center ...
  bleach.radius ...
  boundaries.bleach ...
                    ] = finder_bleach     (...
                                          image.bleach, ...
                                          options.bleach_diameter, ...
                                          options.bleach_factor);

  [...
  nucleus.index ...
  boundaries.nucleus ...
                    ] = finder_nucleus    (...
                                          image.slice_avg, ...
                                          bleach.center, ...
                                          options.threshold_value, ...
                                          options.flag_threshold);

  ## Create and save log image
  # This comes before check if nucleus is found correctly in case stdout is lost, the log image will still show wrong nucleus
  if (options.flag_log_image == 1)
    log_image(...
              image.slice_avg, ...
              image.slice_pre, ...
              image.slice_post, ...
              image.bleach, ...
              boundaries.backg, ...
              boundaries.bleach, ...
              boundaries.nucleus, ...
              file.dir, ...
              file.name);
  endif

  ##Check if nucleus found is correct and skip this image if it is not
  if (numel(nucleus.index) == 0)
    printf ("Didn't found nucleus in '%s'. Maybe threshold value set too high?", file.path);
    clear -exclusive options main;
    continue
  elseif (numel(bleach.index) > numel(nucleus.index))
    printf ("Skipped analysis of '%s' because found cell region '%g'[px] smaller than bleach spot '%g'[px].", file.path, numel(nucleus.index), numel(bleach.index));
    clear -exclusive options main;
    continue
  elseif (numel(nucleus.index) == (image.height * image.width))
    printf ("Nucleus found in '%s' the size of the whole frame '%g'[px]. Maybe threshold value set to low?", file.path, numel(nucleus.index));
    clear -exclusive options main;
    continue
  endif

  ## Find averages of background and subtract it to the image
  [backg.xy_mean]   = calculator_averages(...
                                          image.here, ...
                                          options.nFrames, ...
                                          backg.index);

  backg.xyz_mean    = mean(backg.xy_mean);
  image.here        = image.here - backg.xyz_mean;

  ## Find averages of nucleus and correct for photobleach (based on whole nuclear intensity)
  [nucleus.xy_mean] = calculator_averages (...
                                          image.here, ...
                                          options.nFrames, ...
                                          nucleus.index);

  image.here        = edit_photobleach_correction (...
                                                  image.here, ...
                                                  options.nPre_bleach, ...
                                                  options.nFrames, ...
                                                  nucleus.xy_mean, ...
                                                  options.flag_correct);

  ## Find averages of bleach spot
  [bleach.xy_mean]  = calculator_averages (...
                                          image.here, ...
                                          options.nFrames, ...
                                          bleach.index);

  ## Normalize curve
  bleach.norm_factor        = mean( bleach.xy_mean(options.nPre_bleach-options.nNorm+1 : options.nPre_bleach) );
  bleach.normalized_xy_mean = bleach.xy_mean / bleach.norm_factor;
  ## Calculate value (normalized) that bleach spot should reach to have full recovery
  bleach.full_recovery      = nucleus.xy_mean(options.nPre_bleach+1) / nucleus.xy_mean(options.nPre_bleach);

  ## Logarithmic binning of the FRAP curve
  [...
  log_bin.timestamps ...
  log_bin.normalized_xy_mean...
                            ] = calculator_log_binning (...
                                                        bleach.normalized_xy_mean, ...
                                                        image.timestamps, ...
                                                        options.nPre_bleach, ...
                                                        options.nFrames, ...
                                                        options.binning_start);

  ## Extract Profiles
  # profile.normalized_intensities is a matrix with all intensities values with each row representing
  # a time frame and each column the distance from the center of bleach spot
  [...
  profile.normalized_intensities ...
  profile.distances ...
                                ] = calculator_profile (...
                                                        image.here, ...
                                                        options.nFrames, ...
                                                        options.nPre_bleach, ...
                                                        options.nNorm, ...
                                                        bleach.center, ...
                                                        bleach.radius);

  ################################################################################
  ################################ Start fitting #################################

  image = rmfield (image, "here");

  ## Fitting of the radial profile
  [...
  profile.rCon ...
  profile.sigma ...
  profile.theta ...
  profile.fitted ...
                ] = fitter_radial_profile (...
                                            profile.distances, ...
                                            profile.normalized_intensities(:,options.nPre_bleach+1), ...
                                            options.nSkip_profile, ...
                                            options.resolution);

  profile.nuclear_radius ...
                          = calculator_nuclear_radius(...
                                                      bleach.full_recovery, ...
                                                      profile.rCon, ...
                                                      profile.sigma, ...
                                                      profile.theta, ...
                                                      profile.distances(end), ...
                                                      max([image.height, image.width]) );

  ## Fitting with pure-diffusion
  [
  pure_diffusion.yFitted ...
  pure_diffusion.Df ...
                        ] = fitter_PureDiffusion (...
                                                  profile.nuclear_radius,
                                                  profile.distances(end),
                                                  profile.rCon,
                                                  profile.sigma, ...
                                                  profile.theta, ...
                                                  log_bin.timestamps, ...
                                                  log_bin.normalized_xy_mean, ...
                                                  options.Df);

  ### Fitting full model
  ## Preprocessing
  [
  FullModel_preProcess...
                      ] = fitter_FullModel_preProcess (...
                                                        profile.nuclear_radius, ...
                                                        profile.distances(end), ...
                                                        profile.rCon, ...
                                                        profile.sigma, ...
                                                        profile.theta, ...
                                                        options.Df);

  full_model_2.Df = FullModel_preProcess{1};
  ## Fitting with 2 parameters (kon and koff)
  [
  full_model_2.yFitted ...
  full_model_2.kon ...
  full_model_2.koff ...
  full_model_2.grid ...
                      ] = fitter_FullModel_2parameters (...
                                                        log_bin.timestamps, ...
                                                        log_bin.normalized_xy_mean, ...
                                                        FullModel_preProcess);

  ## Fitting with 3 parameters (kon, koff and Df)
  [
  full_model_3.yFitted ...
  full_model_3.kon ...
  full_model_3.koff ...
  full_model_3.Df ...
                          ] = fitter_FullModel_3parameters (...
                                                            log_bin.timestamps, ...
                                                            log_bin.normalized_xy_mean, ...
                                                            FullModel_preProcess, ...
                                                            full_model_2.kon, ...
                                                            full_model_2.koff, ...
                                                            options.Df);

  # Save processed data (list of variables to save)
  save ("-text", [file.dir, filesep, "extracted_data_", file.name, ".txt"],
    "main", ...
    "options", ...
    "image", ...
    "backg", ...
    "nucleus", ...
    "bleach", ...
    "log_bin", ...
    "profile", ...
    "pure_diffusion", ...
    "full_model_2", ...
    "full_model_3")

  figure (1, "visible", "off")
  subplot(2, 3, 1)
  plot (image.timestamps, [backg.xy_mean; bleach.xy_mean; nucleus.xy_mean])
  title("Background, bleach and nucleus intensity")
  axis ([0 (image.timestamps(end)+1) 0 40])

  subplot(2, 3, 2)
  plot (image.timestamps, bleach.normalized_xy_mean)
  title("Normalized average of bleach intensity")
  axis ([0 (image.timestamps(end)+1) 0.2 1.2])

  subplot(2, 3, 3)
  plot (profile.distances(options.nSkip_profile+1:end), [profile.normalized_intensities(options.nSkip_profile+1:end,options.nPre_bleach+1), profile.fitted])
  title("Profile of the bleach spot")
  text (3,0.9, ["rCon = ", num2str(profile.rCon)])
  text (3,0.8, ["sigma = ", num2str(profile.sigma)])
  text (3,0.7, ["theta = ", num2str(profile.theta)])
  axis ([0 (profile.distances(end)) 0 1.2])

  subplot(2, 3, 4)
  plot (log_bin.timestamps, [log_bin.normalized_xy_mean; pure_diffusion.yFitted'])
  title("Fitting for Pure Diffusion")
  text (20,0.5, ["Df = ", num2str(pure_diffusion.Df)])
  axis ([0 image.timestamps(end) 0.2 1])

  subplot(2, 3, 5)
  plot (log_bin.timestamps, [log_bin.normalized_xy_mean; full_model_2.yFitted'])
  title("Fitting with Full Model (Kon Koff)")
  text (20,0.4, ["Kon = ", num2str(full_model_2.kon)])
  text (20,0.3, ["Koff = ", num2str(full_model_2.koff)])
  axis ([0 image.timestamps(end) 0.2 1])

  subplot(2, 3, 6)
  plot (log_bin.timestamps, [log_bin.normalized_xy_mean; full_model_3.yFitted'])
  title("Fitting with Full Model (Kon Koff Df)")
  text (20,0.5, ["Df = ", num2str(full_model_3.Df)])
  text (20,0.4, ["Kon = ", num2str(full_model_3.kon)])
  text (20,0.3, ["Koff = ", num2str(full_model_3.koff)])
  axis ([0 image.timestamps(end) 0.2 1])

  print ([file.dir, filesep, "plots_", file.name, ".png"], "-dpng", "-S1680,1050")


  clear -exclusive options main

endfor
