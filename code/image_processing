## Copyright (C) 2010 CarnÃ« Draug <carandraug+dev@gmail.com>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.

## Find background, bleaching and nucleus regions
[...
backg.index ...
boundaries.backg ...
                  ] = finder_background (...
                                        image.slice_avg, ...
                                        options.backg_size);

[...
bleach.index ...
bleach.center ...
bleach.radius ...
boundaries.bleach ...
                  ] = finder_bleach     (...
                                        image.bleach, ...
                                        options.bleach_diameter, ...
                                        options.bleach_factor);

[...
nucleus.index ...
boundaries.nucleus ...
                  ] = finder_nucleus    (...
                                        image.slice_avg, ...
                                        bleach.center, ...
                                        options.threshold_value, ...
                                        options.flag_threshold);

## Create and save log image
# This comes before checking if nucleus is found correctly so that in case stdout is lost, the log image will still show the wrong nucleus
if (options.flag_log_image == 1)
  log_image(...
            image.slice_avg, ...
            image.slice_pre, ...
            image.slice_post, ...
            image.bleach, ...
            boundaries.backg, ...
            boundaries.bleach, ...
            boundaries.nucleus, ...
            file.log_path);
endif

##Check if nucleus found is correct and skip this image if it is not
if (numel(nucleus.index) == 0)
  printf ("Didn't found nucleus in '%s'. Maybe threshold value set too high?", file.path);
  clear -exclusive options main paths;
  continue
elseif (numel(bleach.index) > numel(nucleus.index))
  printf ("Skipped analysis of '%s' because found cell region '%g'[px] smaller than bleach spot '%g'[px].", file.path, numel(nucleus.index), numel(bleach.index));
  clear -exclusive options main paths;
  continue
elseif (numel(nucleus.index) == (image.height * image.width))
  printf ("Nucleus found in '%s' the size of the whole frame '%g'[px]. Maybe threshold value set to low?", file.path, numel(nucleus.index));
  clear -exclusive options main paths;
  continue
endif

## Find averages of background and subtract it to the image
[backg.xy_mean]   = calculator_averages(...
                                        image.here, ...
                                        options.nFrames, ...
                                        backg.index);

backg.xyz_mean    = mean(backg.xy_mean);
image.here        = image.here - backg.xyz_mean;

## Find averages of nucleus and correct for photobleach (based on whole nuclear intensity)
[nucleus.xy_mean] = calculator_averages (...
                                        image.here, ...
                                        options.nFrames, ...
                                        nucleus.index);

image.here        = edit_photobleach_correction (...
                                                image.here, ...
                                                options.nPre_bleach, ...
                                                options.nFrames, ...
                                                nucleus.xy_mean, ...
                                                options.flag_correct);

## Find averages of bleach spot
[bleach.xy_mean]  = calculator_averages (...
                                        image.here, ...
                                        options.nFrames, ...
                                        bleach.index);

## Normalize curve
bleach.norm_factor        = mean( bleach.xy_mean(options.nPre_bleach-options.nNorm+1 : options.nPre_bleach) );
bleach.normalized_xy_mean = bleach.xy_mean / bleach.norm_factor;
## Calculate value (normalized) that bleach spot should reach to have full recovery
bleach.full_recovery      = nucleus.xy_mean(options.nPre_bleach+1) / nucleus.xy_mean(options.nPre_bleach);

## Logarithmic binning of the FRAP curve
[...
log_bin.timestamps ...
log_bin.normalized_xy_mean...
                          ] = calculator_log_binning (...
                                                      bleach.normalized_xy_mean, ...
                                                      image.timestamps, ...
                                                      options.nPre_bleach, ...
                                                      options.nFrames, ...
                                                      options.binning_start);

## Extract Profiles
# profile.normalized_intensities is a matrix with all intensities values with each row representing
# a time frame and each column the distance from the center of bleach spot
[...
profile.normalized_intensities ...
profile.distances ...
                              ] = calculator_profile (...
                                                      image.here, ...
                                                      options.nFrames, ...
                                                      options.nPre_bleach, ...
                                                      options.nNorm, ...
                                                      bleach.center, ...
                                                      bleach.radius);
