## Copyright (C) 2010 CarnÃ« Draug <carandraug+dev@gmail.com>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.

## Data used for fitting.
# 1 = logaritmic binned
# 2 = data from processed images
switch options.flag_fit_data
  case 1
    fitting_times       = log_bin.timestamps(:);
    fitting_intensities = log_bin.normalized_xy_mean(:);
  case 2
    fitting_times       = image.timestamps(options.nPre_bleach+1:end);
    fitting_intensities = bleach.normalized_xy_mean(options.nPre_bleach+1:end);
  otherwise
    error ("Non supported flag for data for fitting.\n")
endswitch

## Fitting of the radial profile
[...
profile.rCon ...
profile.sigma ...
profile.theta ...
profile.fitted ...
              ] = fitter_radial_profile (...
                                          profile.distances, ...
                                          profile.normalized_intensities(:,options.nPre_bleach+1), ...
                                          options.nSkip_profile, ...
                                          options.resolution);

profile.nuclear_radius ...
                        = calculator_nuclear_radius(...
                                                    bleach.full_recovery, ...
                                                    profile.rCon, ...
                                                    profile.sigma, ...
                                                    profile.theta, ...
                                                    profile.distances(end), ...
                                                    max([image.height, image.width]) );

## Fitting with pure-diffusion
[
pure_diffusion.yFitted ...
pure_diffusion.Df ...
                      ] = fitter_PureDiffusion (...
                                                profile.nuclear_radius,
                                                profile.distances(end),
                                                profile.rCon,
                                                profile.sigma, ...
                                                profile.theta, ...
                                                fitting_times, ...
                                                fitting_intensities, ...
                                                options.Df);

### Fitting full model
## Preprocessing
[
FullModel_preProcess...
                    ] = fitter_FullModel_preProcess (...
                                                      profile.nuclear_radius, ...
                                                      profile.distances(end), ...
                                                      profile.rCon, ...
                                                      profile.sigma, ...
                                                      profile.theta, ...
                                                      options.Df);

full_model_2.Df = FullModel_preProcess{1};
## Fitting with 2 parameters (kon and koff)
[
full_model_2.yFitted ...
full_model_2.kon ...
full_model_2.koff ...
full_model_2.grid ...
                    ] = fitter_FullModel_2parameters (...
                                                      fitting_times, ...
                                                      fitting_intensities, ...
                                                      FullModel_preProcess);

## Fitting with 3 parameters (kon, koff and Df)
[
full_model_3.yFitted ...
full_model_3.kon ...
full_model_3.koff ...
full_model_3.Df ...
                        ] = fitter_FullModel_3parameters (...
                                                          fitting_times, ...
                                                          fitting_intensities, ...
                                                          FullModel_preProcess, ...
                                                          full_model_2.kon, ...
                                                          full_model_2.koff, ...
                                                          options.Df);
